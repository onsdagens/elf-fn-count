use asm_riscv::{Reg, I};
use clap::Parser;
use riscv_elf_parse::*;
use std::collections::BTreeMap;
use std::collections::Bound;
use std::collections::HashMap;
use std::collections::HashSet;
use std::fs;
use std::ops::Range;
#[derive(Parser, Debug)]
struct Args {
    #[arg(short, long)]
    path: String,
}

fn main() {
    let args = Args::parse();
    let bytes =
        fs::read(args.path.clone()).expect(&format!("Elf file at {} not found.", args.path));
    let mut memory = Memory::new_from_file(&bytes, false);
    let mut insns: Vec<(u32, I)> = vec![];
    let mut bit_insns: HashMap<u32, u32> = HashMap::new();
    let insn_range = Range {
        start: 0x1080_0000_usize,
        end: 0x1080_1400_usize,
    };
    for addr in insn_range {
        let instr: u32 = (*memory.bytes.get(&(addr * 4)).unwrap_or(&0) as u32)
            | ((*memory.bytes.get(&(addr * 4 + 1)).unwrap_or(&0) as u32) << 8)
            | ((*memory.bytes.get(&(addr * 4 + 2)).unwrap_or(&0) as u32) << 16)
            | ((*memory.bytes.get(&(addr * 4 + 3)).unwrap_or(&0) as u32) << 24);
        bit_insns.insert((addr * 4) as u32, instr);
        let instr = I::try_from(instr).unwrap_or(I::ADDI {
            d: Reg::ZERO,
            s: Reg::ZERO,
            im: 0,
        });
        insns.push(((addr as u32) * 4, instr));
    }
    println!("{}", memory.bytes.len());
    // prune rust added symbols
    for symbol in memory.symbols.clone() {
        if symbol.1.contains(".Lpc") {
            memory.symbols.remove(&symbol.0);
        }
    }
    let mut reg_sets: Vec<(String, HashSet<Reg>)> = vec![];
    let mut reg_set: HashSet<Reg> = HashSet::new();
    let mut f_addr: Vec<u32> = vec![];
    let mut f_bounds: Vec<(String, u32, u32)> = vec![];
    let mut symbols_tree: BTreeMap<usize, String> = BTreeMap::new();
    for insn in insns.clone() {
        //println!("{:x?}", insn);
        match insn.1 {
            I::JAL { d, im } => match d {
                Reg::RA => {
                    println!("JAL RA");
                    let bit_im = bit_insns.get(&insn.0).unwrap();
                    let bytes = [
                        ((bit_im & (0xFF << 24)) >> 24) as u8,
                        ((bit_im & (0xFF << 16)) >> 16) as u8,
                        ((bit_im & (0xFF << 8)) >> 8) as u8,
                        (bit_im & (0xFF)) as u8,
                    ];
                    let bit_im: u32 = u32::from_be_bytes(bytes);
                    let im = (((bit_im & (0b1 << 31)) >> 31) << 20)
                        | (((bit_im & (0b1111111111 << 21)) >> 21) << 1)
                        | (((bit_im & (0b1 << 20)) >> 20) << 11)
                        | (bit_im & (0b11111111 << 12));
                    let im = sign_zero_extend(true, 21, im);
                    f_addr.push((insn.0 as i32 + im as i32) as u32);
                }
                _ => {}
            },
            _ => {}
        }
    }
    for symbol in memory.symbols.clone() {
        symbols_tree.insert(symbol.0, symbol.1);
    }
    println!("Found calls:");
    for addr in f_addr {
        println!(
            "{:08x}: {}",
            addr,
            symbols_tree
                .get(&(addr as usize))
                .unwrap_or(&"None".to_string())
        );
        let s = "Unbounded".to_string();
        let bound = symbols_tree
            .range(((addr + 1) as usize)..)
            .next()
            .unwrap_or((&0xFFFFFFFF, &s));
        f_bounds.push((
            symbols_tree
                .get(&(addr as usize))
                .unwrap_or(&"None".to_string())
                .to_owned(),
            addr,
            *bound.0 as u32,
        ));
        println!("Bounded by {} at {:08x}", bound.1, bound.0);
    }

    for bound in f_bounds {
        let mut reg_set: HashSet<Reg> = HashSet::new();
        for addr in bound.1..bound.2 {
            if addr % 4 != 0 {
                continue;
            }
            let insn = insns.get(addr as usize).unwrap().1;
            #[allow(unused_variables)]
            match insn {
                I::LUI { d, im } => {
                    reg_set.insert(d);
                }
                I::AUIPC { d, im } => {
                    reg_set.insert(d);
                }
                I::JAL { d, im } => {
                    reg_set.insert(d);
                }
                I::JALR { d, s, im } => {
                    reg_set.insert(d);
                    reg_set.insert(s);
                }
                I::BEQ { s1, s2, im } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                }
                I::BNE { s1, s2, im } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                }
                I::BLT { s1, s2, im } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                }
                I::BGE { s1, s2, im } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                }
                I::BLTU { s1, s2, im } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                }
                I::BGEU { s1, s2, im } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                }
                I::LB { d, s, im } => {
                    reg_set.insert(d);
                    reg_set.insert(s);
                }
                I::LH { d, s, im } => {
                    reg_set.insert(d);
                    reg_set.insert(s);
                }
                I::LW { d, s, im } => {
                    reg_set.insert(d);
                    reg_set.insert(s);
                }
                I::LBU { d, s, im } => {
                    reg_set.insert(d);
                    reg_set.insert(s);
                }
                I::LHU { d, s, im } => {
                    reg_set.insert(d);
                    reg_set.insert(s);
                }
                I::ADDI { d, s, im } => {
                    reg_set.insert(d);
                    reg_set.insert(s);
                }
                I::SLTI { d, s, im } => {
                    reg_set.insert(d);
                    reg_set.insert(s);
                }
                I::SLTUI { d, s, im } => {
                    reg_set.insert(d);
                    reg_set.insert(s);
                }
                I::XORI { d, s, im } => {
                    reg_set.insert(d);
                    reg_set.insert(s);
                }
                I::ORI { d, s, im } => {
                    reg_set.insert(d);
                    reg_set.insert(s);
                }
                I::ANDI { d, s, im } => {
                    reg_set.insert(d);
                    reg_set.insert(s);
                }
                I::SLLI { d, s, im } => {
                    reg_set.insert(d);
                    reg_set.insert(s);
                }
                I::SRLI { d, s, im } => {
                    reg_set.insert(d);
                    reg_set.insert(s);
                }
                I::SRAI { d, s, im } => {
                    reg_set.insert(d);
                    reg_set.insert(s);
                }
                I::SB { s1, s2, im } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                }
                I::SH { s1, s2, im } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                }
                I::SW { s1, s2, im } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                }
                I::ADD { d, s1, s2 } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                    reg_set.insert(d);
                }
                I::SUB { d, s1, s2 } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                    reg_set.insert(d);
                }
                I::SLL { d, s1, s2 } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                    reg_set.insert(d);
                }
                I::SLT { d, s1, s2 } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                    reg_set.insert(d);
                }
                I::SLTU { d, s1, s2 } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                    reg_set.insert(d);
                }
                I::XOR { d, s1, s2 } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                    reg_set.insert(d);
                }
                I::SRL { d, s1, s2 } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                    reg_set.insert(d);
                }
                I::SRA { d, s1, s2 } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                    reg_set.insert(d);
                }
                I::OR { d, s1, s2 } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                    reg_set.insert(d);
                }
                I::AND { d, s1, s2 } => {
                    reg_set.insert(s1);
                    reg_set.insert(s2);
                    reg_set.insert(d);
                }
                I::MRET {} => {}
                I::CSRRCI { csr, zimm, d } => {
                    reg_set.insert(d);
                }
                I::CSRRW { csr, s1, d } => {
                    reg_set.insert(d);
                    reg_set.insert(s1);
                }
                I::CSRRS { csr, s1, d } => {
                    reg_set.insert(d);
                    reg_set.insert(s1);
                }
                I::CSRRWI { csr, zimm, d } => {
                    reg_set.insert(d);
                }
                I::CSRRSI { csr, zimm, d } => {
                    reg_set.insert(d);
                }
                I::CSRRC { csr, s1, d } => {
                    reg_set.insert(d);
                    reg_set.insert(s1);
                }
                I::ECALL {} => {}
                I::EBREAK {} => {}
                I::FENCE { im } => {}
            }
        }
        reg_sets.push((bound.0, reg_set));
    }
    for set in reg_sets {
        println!("{}", set.0);
        for reg in set.1.clone() {
            println!("{:?}", reg);
        }
        println!("TOTAL: {}", set.1.len());
        println!("------------------------------------------------");
    }
}

fn sign_zero_extend(sign: bool, width: u8, val: u32) -> u32 {
    assert!(width > 0);
    if sign {
        let sign_bit = val >> (width - 1);
        //println!("sign bit:{}", sign_bit);
        let mask = !(2u32.pow(width as u32) - 1);
        //println!("MASK: {:08x}", mask);
        if sign_bit == 1 {
            val | mask
        } else {
            val
        }
    } else {
        val
    }
}
